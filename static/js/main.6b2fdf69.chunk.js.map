{"version":3,"sources":["components/ItemCard/index.js","components/Navbar/index.js","App.js","index.js"],"names":["ItemCard","props","className","onClick","selectChibi","id","src","process","image","Navbar","href","message","score","topScore","App","state","chibis","clicked","shuffleChibi","array","i","length","j","Math","floor","random","setState","indexOf","push","this","map","chibi","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"66BAYeA,MATf,SAAkBC,GACd,OAEI,aADA,CACA,OAAKC,UAAU,aAAaC,QAAS,kBAAMF,EAAMG,YAAYH,EAAMI,KAAnE,SACI,qBAAKC,IAAKC,iBAAyBN,EAAMO,W,MCgBtCC,MApBf,SAAgBR,GACZ,OACI,gCACI,qBAAKC,UAAU,uBAAf,SACI,sBAAKA,UAAU,kBAAf,UACI,mBAAGA,UAAU,eAAeQ,KAAK,IAAjC,2BACA,sBAAMR,UAAU,cAAhB,SAA+BD,EAAMU,UACrC,uBAAMT,UAAU,cAAhB,oBACYD,EAAMW,MADlB,yBAC6CX,EAAMY,iBAI3D,mCACI,kGACA,yF,eC4DDC,E,4MAtEbC,MAAQ,CACNC,OAAQA,EACRJ,MAAO,EACPC,SAAU,EACVI,QAAS,GACTN,QAAS,qC,EAGXO,aAAe,WAGb,IADA,IAAMC,EAAQ,EAAKJ,MAAMC,OAChBI,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADD,EAElB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFkC,KAE9BD,EAAMG,GAFwB,KAI3C,EAAKI,SAAS,CAAEV,OAAQG,K,EAG1Bf,YAAc,SAACC,IAC2B,IAApC,EAAKU,MAAME,QAAQU,QAAQtB,GAE7B,EAAKqB,SAAS,CACZd,MAAO,EACPK,QAAS,GACTN,QAAS,uCAIX,EAAKI,MAAME,QAAQW,KAAKvB,GAExB,EAAKqB,SAAS,CACZd,MAAO,EAAKG,MAAMH,MAAQ,EAC1BD,QAAS,2BAGP,EAAKI,MAAMH,OAAS,EAAKG,MAAMF,UACjC,EAAKa,SAAS,CACZb,SAAU,EAAKE,MAAMF,SAAW,KAKtC,EAAKK,gB,uDAIP,WACEW,KAAKX,iB,oBAGP,WAAU,IAAD,OACP,OACE,gCACE,cAAC,EAAD,CAAQN,MAAOiB,KAAKd,MAAMH,MAAOC,SAAUgB,KAAKd,MAAMF,SAAUF,QAASkB,KAAKd,MAAMJ,UACpF,sBAAMT,UAAU,YAAhB,SACG2B,KAAKd,MAAMC,OAAOc,KAAI,SAAAC,GAAK,OAC1B,cAAC,EAAD,CACE1B,GAAI0B,EAAM1B,GAEVG,MAAOuB,EAAMvB,MACbU,aAAc,EAAKA,aACnBd,YAAa,EAAKA,aAHb2B,EAAM1B,gB,GA3DP2B,aCFlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.6b2fdf69.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction ItemCard(props) {\r\n    return (\r\n        // onClick function below requires anonymous function to prevent it from being called automatically\r\n        <div className=\"click-item\" onClick={() => props.selectChibi(props.id)}>\r\n            <img src={process.env.PUBLIC_URL + props.image} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ItemCard;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Navbar(props) {\r\n    return (\r\n        <div>\r\n            <nav className=\"navbar nav-justified\">\r\n                <div className=\"container-fluid\">\r\n                    <a className=\"navbar-brand\" href=\"/\">Titan Clicker</a>\r\n                    <span className=\"navbar-text\">{props.message}</span>\r\n                    <span className=\"navbar-text\">\r\n                        Score: {props.score} \\~/\\~/ High Score: {props.topScore}\r\n                    </span>\r\n                </div>\r\n            </nav>\r\n            <header>\r\n                <h1>Welcome to the React-powered clicky-game of Titanic proportions!</h1>\r\n                <h2>Don't you dare click any image more than once...</h2>\r\n            </header>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React, { Component } from \"react\";\nimport ItemCard from \"./components/ItemCard\";\nimport Navbar from \"./components/Navbar\"\nimport './App.css';\nimport chibis from \"./chibis.json\";\n\nclass App extends Component {\n  state = {\n    chibis: chibis,\n    score: 0,\n    topScore: 0,\n    clicked: [],\n    message: \"Click an image to begin the game!\"\n  }\n\n  shuffleChibi = () => {\n    // Durstenfeld shuffle using ES6 syntax\n    const array = this.state.chibis;\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    this.setState({ chibis: array });\n  }\n\n  selectChibi = (id) => {\n    if (this.state.clicked.indexOf(id) !== -1) {\n      // if the clicked image has an id that is in the \"clicked\" array, then it will have an index that DNE -1. Score and clicked array are reset as a result.\n      this.setState({\n        score: 0,\n        clicked: [],\n        message: \"Failure! But you can try again...\"\n      });\n    } else {\n      // if the clicked image conversely does not have its id in the \"clicked\" array, then its id is pushed into it. Then state.score increases by 1 and state.topScore increases if it has been surpassed.\n      this.state.clicked.push(id);\n      \n      this.setState({\n        score: this.state.score + 1,\n        message: \"Success! Push forward!\"\n      });\n\n      if (this.state.score >= this.state.topScore) {\n        this.setState({\n          topScore: this.state.topScore + 1\n        })\n      }\n    }\n    \n    this.shuffleChibi();\n  }\n\n  // Lifecycle method utilized to shuffle order of images when the App component is first mounted.\n  componentDidMount() {\n    this.shuffleChibi();\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar score={this.state.score} topScore={this.state.topScore} message={this.state.message}/>\n        <main className=\"container\">\n          {this.state.chibis.map(chibi => (\n            <ItemCard\n              id={chibi.id}\n              key={chibi.id}\n              image={chibi.image}\n              shuffleChibi={this.shuffleChibi}\n              selectChibi={this.selectChibi}\n            />\n          ))}\n        </main>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}